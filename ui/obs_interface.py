import customtkinter as ctk
from tkinter import messagebox, filedialog
import threading
import time
import random
import json
import os
import sqlite3
import logging
from datetime import datetime

from core.traffic_manager import UltimateTrafficManager
from core.database import DatabaseManager
from utils.constants import OBS_COLORS, CATEGORIES, CATEGORY_TITLES
from utils.helpers import load_settings, save_settings

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
from ui.categories.main_category import MainCategory
from ui.categories.websites_category import WebsitesCategory
from ui.categories.phones_category import PhonesCategory
from ui.categories.search_category import SearchCategory
from ui.categories.schedule_category import ScheduleCategory
from ui.categories.ai_category import AICategory
from ui.categories.proxy_category import ProxyCategory
from ui.categories.behavior_category import BehaviorCategory
from ui.categories.security_category import SecurityCategory
from ui.categories.performance_category import PerformanceCategory
from ui.categories.stats_category import StatsCategory
from ui.categories.general_category import GeneralCategory

logger = logging.getLogger('WhoCallsUltimate')

class OBSLikeInterface(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        self.title("WhoCalls ULTIMATE Suite v6.0 ‚òÖ OBS Style")
        self.geometry("1400x800")
        self.minsize(1200, 700)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –≤ —Å—Ç–∏–ª–µ OBS
        self.obs_colors = OBS_COLORS
        
        ctk.set_appearance_mode("Dark")
        
        self.traffic_manager = UltimateTrafficManager()
        self.db_manager = DatabaseManager()
        self.is_running = False
        self.current_day = datetime.now().strftime("%Y-%m-%d")
        self.settings = self.load_settings()
        self.current_tab = None
        
        self.setup_obs_layout()
        self.setup_database()
        self.load_initial_data()
        
    def setup_obs_layout(self):
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ OBS Studio"""
        # Main grid
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–∫–∞–∫ –≤ OBS)
        self.sidebar = ctk.CTkFrame(self, width=220, corner_radius=0, fg_color=self.obs_colors["sidebar"])
        self.sidebar.grid(row=0, column=0, sticky="nsew")
        self.sidebar.grid_rowconfigure(12, weight=1)
        
        # –õ–æ–≥–æ—Ç–∏–ø
        self.logo_label = ctk.CTkLabel(
            self.sidebar, 
            text="WhoCalls ULTIMATE",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.obs_colors["accent"]
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 15))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(self.sidebar, height=2, fg_color="#444444")
        separator.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–∞–∫ –≤ OBS)
        self.category_buttons = {}
        for i, (text, category) in enumerate(CATEGORIES, 2):
            btn = ctk.CTkButton(
                self.sidebar, 
                text=text, 
                command=lambda c=category: self.show_category(c),
                fg_color="transparent",
                hover_color="#333333",
                anchor="w",
                text_color=self.obs_colors["text"],
                font=ctk.CTkFont(size=13)
            )
            btn.grid(row=i, column=0, padx=10, pady=2, sticky="ew")
            self.category_buttons[category] = btn
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–∏–∑—É
        self.start_stop_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.start_stop_frame.grid(row=13, column=0, sticky="ew", padx=10, pady=10)
        
        self.start_btn = ctk.CTkButton(
            self.start_stop_frame,
            text="üöÄ –ó–∞–ø—É—Å–∫",
            command=self.start_all,
            fg_color=self.obs_colors["success"],
            hover_color="#3D8C40",
            height=40
        )
        self.start_btn.pack(fill="x", pady=5)
        
        self.stop_btn = ctk.CTkButton(
            self.start_stop_frame,
            text="‚èπÔ∏è –°—Ç–æ–ø",
            command=self.stop_all,
            fg_color=self.obs_colors["danger"],
            hover_color="#C13535",
            height=40
        )
        self.stop_btn.pack(fill="x", pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.settings_frame = ctk.CTkFrame(self, fg_color=self.obs_colors["background"])
        self.settings_frame.grid(row=0, column=1, sticky="nsew", padx=0, pady=0)
        self.settings_frame.grid_columnconfigure(0, weight=1)
        self.settings_frame.grid_rowconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category_title = ctk.CTkLabel(
            self.settings_frame,
            text="–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.obs_colors["accent"]
        )
        self.category_title.grid(row=0, column=0, sticky="w", padx=20, pady=15)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.content_frame = ctk.CTkScrollableFrame(self.settings_frame, fg_color=self.obs_colors["background"])
        self.content_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä –≤–Ω–∏–∑—É
        self.status_bar = ctk.CTkFrame(self, height=30, fg_color=self.obs_colors["sidebar"])
        self.status_bar.grid(row=1, column=0, columnspan=2, sticky="ew")
        
        self.status_label = ctk.CTkLabel(
            self.status_bar, 
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            text_color=self.obs_colors["success"],
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(side="left", padx=10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_category("main")
        
    def show_category(self, category):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        for btn in self.category_buttons.values():
            btn.configure(fg_color="transparent")
        
        # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        self.category_buttons[category].configure(fg_color="#333333")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.category_title.configure(text=CATEGORY_TITLES.get(category, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == "main":
            main_cat = MainCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            main_cat.setup()
        elif category == "websites":
            websites_cat = WebsitesCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            websites_cat.setup()
        elif category == "phones":
            phones_cat = PhonesCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            phones_cat.setup()
        elif category == "search":
            search_cat = SearchCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            search_cat.setup()
        elif category == "schedule":
            schedule_cat = ScheduleCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            schedule_cat.setup()
        elif category == "ai":
            ai_cat = AICategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            ai_cat.setup()
        elif category == "proxy":
            proxy_cat = ProxyCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            proxy_cat.setup()
        elif category == "behavior":
            behavior_cat = BehaviorCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            behavior_cat.setup()
        elif category == "security":
            security_cat = SecurityCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            security_cat.setup()
        elif category == "performance":
            performance_cat = PerformanceCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            performance_cat.setup()
        elif category == "stats":
            stats_cat = StatsCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            stats_cat.setup()
        elif category == "general":
            general_cat = GeneralCategory(self, self.content_frame, self.obs_colors, self.traffic_manager, self.db_manager)
            general_cat.setup()
        
        self.current_tab = category

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.db_manager.connect():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            if not self.db_manager.setup_tables():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        default_settings = {
            'websites': [{'url': 'https://who-calls.ru', 'enabled': True}],
            'click_ads': True,  # –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            'search_settings': {
                'enable_search': True,
                'search_speed': 'normal',
                'search_depth': 3,
                'search_type': 'standard'
            },
            'schedule': {
                'enabled': False,
                'start_time': '09:00',
                'end_time': '18:00',
                'days': [True, True, True, True, True, False, False],
                'daily_limit': 100,
                'enable_breaks': True,
                'break_duration': 5,
                'break_interval': 30
            },
            'ai_settings': {
                'enabled': True,
                'level': 'advanced',
                'learning': True,
                'learning_speed': 'normal',
                'optimizations': [True, True, True, True]
            }
        }
        
        try:
            if os.path.exists('settings.json'):
                with open('settings.json', 'r', encoding='utf-8') as f:
                    loaded_settings = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    for key, value in loaded_settings.items():
                        if key in default_settings:
                            if isinstance(value, dict) and isinstance(default_settings[key], dict):
                                default_settings[key].update(value)
                            else:
                                default_settings[key] = value
                        else:
                            default_settings[key] = value
        except:
            pass
            
        return default_settings

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            with open('settings.json', 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False

    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
        try:
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM phones")
            count = self.db_manager.cursor.fetchone()[0]
            if hasattr(self, 'total_phones_var'):
                self.total_phones_var.set(f"{count} –Ω–æ–º–µ—Ä–æ–≤")
        except:
            if hasattr(self, 'total_phones_var'):
                self.total_phones_var.set("0 –Ω–æ–º–µ—Ä–æ–≤")

    def update_main_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime("%Y-%m-%d")
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM sessions WHERE date(timestamp) = ?", (today,))
            sessions_today = self.db_manager.cursor.fetchone()[0]
            self.sessions_today_var.set(str(sessions_today))
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM sessions")
            total_sessions = self.db_manager.cursor.fetchone()[0]
            self.total_sessions_var.set(str(total_sessions))
            
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM sessions WHERE success = 1")
            success_sessions = self.db_manager.cursor.fetchone()[0]
            self.success_sessions_var.set(str(success_sessions))
            
            self.db_manager.cursor.execute("SELECT SUM(income) FROM sessions")
            total_income = self.db_manager.cursor.fetchone()[0] or 0
            self.total_income_var.set(f"{total_income:.2f} —Ä—É–±")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            if self.is_running:
                self.system_status_var.set("–†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.system_status_var.set("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def update_phones_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM phones")
            total = self.db_manager.cursor.fetchone()[0]
            self.total_phones_var.set(str(total))
            
            self.db_manager.cursor.execute("SELECT COUNT(*) FROM phones WHERE used = 1")
            used = self.db_manager.cursor.fetchone()[0]
            self.used_phones_var.set(str(used))
            
            self.db_manager.cursor.execute("SELECT MAX(last_used) FROM phones")
            last_update = self.db_manager.cursor.fetchone()[0] or "–ù–∏–∫–æ–≥–¥–∞"
            self.last_update_var.set(str(last_update))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")

    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if not self.is_running:
            self.is_running = True
            self.start_btn.configure(state="disabled")
            self.stop_btn.configure(state="normal")
            self.status_label.configure(text="–†–∞–±–æ—Ç–∞–µ—Ç", text_color=self.obs_colors["success"])
            self.system_status_var.set("–†–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.run_traffic, daemon=True).start()
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if self.is_running:
            self.is_running = False
            self.start_btn.configure(state="normal")
            self.stop_btn.configure(state="disabled")
            self.status_label.configure(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", text_color=self.obs_colors["danger"])
            self.system_status_var.set("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def run_traffic(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç—Ä–∞—Ñ–∏–∫–∞"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
                today = datetime.now().strftime("%Y-%m-%d")
                self.db_manager.cursor.execute("SELECT COUNT(*) FROM sessions WHERE date(timestamp) = ?", (today,))
                sessions_today = self.db_manager.cursor.fetchone()[0]
                
                if sessions_today >= self.settings['schedule']['daily_limit']:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π: {sessions_today}")
                    time.sleep(60)
                    continue
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
                phone, city = self.traffic_manager.generate_advanced_phone()
                
                # –í—ã–±–æ—Ä —Å–∞–π—Ç–∞
                website = random.choice(self.settings['websites'])['url']
                
                # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
                success = self.run_session(website, phone)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
                timestamp = datetime.now().isoformat()
                income = random.uniform(0.5, 2.5) if success else 0
                
                self.db_manager.cursor.execute(
                    "INSERT INTO sessions (timestamp, website, phone, success, duration, income) VALUES (?, ?, ?, ?, ?, ?)",
                    (timestamp, website, phone, success, random.uniform(10, 60), income)
                )
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–º–µ—Ä–∞
                self.db_manager.cursor.execute(
                    "INSERT OR IGNORE INTO phones (number, city) VALUES (?, ?)",
                    (phone, city)
                )
                self.db_manager.cursor.execute(
                    "UPDATE phones SET used = 1, last_used = ? WHERE number = ?",
                    (timestamp, phone)
                )
                
                self.db_manager.conn.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.after(0, self.update_main_stats)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
                time.sleep(random.uniform(5, 15))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(10)

    def run_session(self, website, phone):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            proxy = random.choice(self.traffic_manager.proxy_list) if self.traffic_manager.proxy_list else None
            if not self.traffic_manager.traffic_executor.create_stealth_browser(proxy):
                return False
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            success = self.traffic_manager.traffic_executor.real_navigation(website)
            if not success:
                return False
            
            # –ü–æ–∏—Å–∫
            if self.settings['search_settings']['enable_search']:
                search_success = self.traffic_manager.traffic_executor.real_search(website, phone)
                if not search_success:
                    return False
            
            # –ö–ª–∏–∫–∏ –ø–æ —Ä–µ–∫–ª–∞–º–µ
            if hasattr(self, 'enable_ads_var') and self.enable_ads_var.get():
                self.traffic_manager.traffic_executor.click_ads()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            self.traffic_manager.traffic_executor.close()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def generate_phones(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        try:
            count = 1000  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1000 –Ω–æ–º–µ—Ä–æ–≤
            new_phones = []
            
            for _ in range(count):
                phone, city = self.traffic_manager.generate_advanced_phone()
                new_phones.append((phone, city))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
            self.db_manager.cursor.executemany(
                "INSERT OR IGNORE INTO phones (number, city) VALUES (?, ?)",
                new_phones
            )
            self.db_manager.conn.commit()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} –Ω–æ–º–µ—Ä–æ–≤")
            self.update_phones_stats()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            today = datetime.now().strftime("%Y-%m-%d")
            
            self.db_manager.cursor.execute("""
                SELECT COUNT(*), SUM(success), SUM(income), AVG(duration)
                FROM sessions 
                WHERE date(timestamp) = ?
            """, (today,))
            
            result = self.db_manager.cursor.fetchone()
            total, success, income, avg_duration = result
            
            report = f"""
üìä –û–¢–ß–ï–¢ –ó–ê {today}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total or 0}
–£—Å–ø–µ—à–Ω—ã—Ö: {success or 0}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success/total*100 if total else 0):.1f}%
–î–æ—Ö–æ–¥: {income or 0:.2f} —Ä—É–±
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_duration or 0:.1f} —Å–µ–∫
            """
            
            messagebox.showinfo("–û—Ç—á–µ—Ç", report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.update_main_stats()
        self.update_phones_stats()
        self.status_label.configure(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", text_color=self.obs_colors["success"])
        self.after(2000, lambda: self.status_label.configure(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", text_color=self.obs_colors["success"]))

    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.save_websites_settings()
        self.save_search_settings()
        self.save_schedule_settings()
        self.save_ai_settings()
        self.save_settings()
        
        self.status_label.configure(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", text_color=self.obs_colors["success"])
        self.after(2000, lambda: self.status_label.configure(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", text_color=self.obs_colors["success"]))

    def save_websites_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–æ–≤"""
        try:
            main_site = self.main_site_var.get().strip()
            if not main_site:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            extra_sites = self.extra_sites_text.get("1.0", "end-1c").strip().split('\n')
            extra_sites = [site.strip() for site in extra_sites if site.strip()]
            
            self.settings['websites'] = [{'url': main_site, 'enabled': True}]
            for site in extra_sites:
                self.settings['websites'].append({'url': site, 'enabled': True})
                # –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –†–ï–ö–õ–ê–ú–´ (–î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£)
            self.settings['click_ads'] = self.enable_ads_var.get()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def save_search_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞"""
        try:
            self.settings['search_settings'] = {
                'enable_search': self.enable_search_var.get(),
                'search_speed': self.search_speed_var.get(),
                'search_depth': self.search_depth_var.get(),
                'search_type': self.search_type_var.get()
            }
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def save_schedule_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            self.settings['schedule'] = {
                'enabled': self.enable_schedule_var.get(),
                'start_time': self.start_time_var.get(),
                'end_time': self.end_time_var.get(),
                'days': [var.get() for var in self.days_vars],
                'daily_limit': self.daily_limit_var.get(),
                'enable_breaks': self.enable_breaks_var.get(),
                'break_duration': self.break_duration_var.get(),
                'break_interval': self.break_interval_var.get()
            }
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def save_ai_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        try:
            self.settings['ai_settings'] = {
                'enabled': self.enable_ai_var.get(),
                'level': self.ai_level_var.get(),
                'learning': self.enable_learning_var.get(),
                'learning_speed': self.learning_speed_var.get(),
                'optimizations': [var.get() for var in self.optimization_vars]
            }
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ò–ò: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def import_phones(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    phones = [line.strip() for line in f if line.strip()]
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
                phone_data = [(phone, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for phone in phones]
                self.db_manager.cursor.executemany(
                    "INSERT OR IGNORE INTO phones (number, city) VALUES (?, ?)",
                    phone_data
                )
                self.db_manager.conn.commit()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤")
                self.update_phones_stats()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

    def export_phones(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞",
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if file_path:
                self.db_manager.cursor.execute("SELECT number FROM phones")
                phones = [row[0] for row in self.db_manager.cursor.fetchall()]
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(phones))
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

    def clear_phones(self):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –Ω–æ–º–µ—Ä–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –Ω–æ–º–µ—Ä–æ–≤?"):
            try:
                self.db_manager.cursor.execute("DELETE FROM phones")
                self.db_manager.conn.commit()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω–∞")
                self.update_phones_stats()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

    def import_proxies(self):
        """–ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    proxies = [line.strip() for line in f if line.strip()]
                
                self.proxy_text.delete("1.0", "end")
                self.proxy_text.insert("1.0", '\n'.join(proxies))
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

    def save_proxies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª"""
        try:
            proxies = self.proxy_text.get("1.0", "end-1c").strip().split('\n')
            proxies = [proxy.strip() for proxy in proxies if proxy.strip()]
            
            with open('proxies.txt', 'w', encoding='utf-8') as f:
                f.write('\n'.join(proxies))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            self.traffic_manager.proxy_list = proxies
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def clear_proxies(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏?"):
            self.proxy_text.delete("1.0", "end")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –æ—á–∏—â–µ–Ω")

    def test_proxies(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.generate_report()

    def generate_weekly_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def generate_monthly_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ backup"""
        try:
            backup_data = {
                'settings': self.settings,
                'phones': [],
                'sessions': []
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
            self.db_manager.cursor.execute("SELECT number, city, used, last_used FROM phones")
            backup_data['phones'] = self.db_manager.cursor.fetchall()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
            self.db_manager.cursor.execute("SELECT timestamp, website, phone, success, duration, income FROM sessions")
            backup_data['sessions'] = self.db_manager.cursor.fetchall()
            
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å backup",
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Backup —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")

    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ backup —Ñ–∞–π–ª",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if 'settings' in backup_data:
                    self.settings = backup_data['settings']
                    self.save_settings()
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
                if 'phones' in backup_data:
                    self.db_manager.cursor.execute("DELETE FROM phones")
                    self.db_manager.cursor.executemany(
                        "INSERT INTO phones (number, city, used, last_used) VALUES (?, ?, ?, ?)",
                        backup_data['phones']
                    )
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
                if 'sessions' in backup_data:
                    self.db_manager.cursor.execute("DELETE FROM sessions")
                    self.db_manager.cursor.executemany(
                        "INSERT INTO sessions (timestamp, website, phone, success, duration, income) VALUES (?, ?, ?, ?, ?, ?)",
                        backup_data['sessions']
                    )
                
                self.db_manager.conn.commit()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Backup –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.update_main_stats()
                self.update_phones_stats()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è backup: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è backup: {e}")

    def export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(self.settings, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            file_path = filedialog.askopenfilename(
                title="–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    imported_settings = json.load(f)
                
                self.settings = imported_settings
                self.save_settings()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            try:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if os.path.exists('settings.json'):
                    os.remove('settings.json')
                
                if os.path.exists('proxies.txt'):
                    os.remove('proxies.txt')
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.settings = self.load_settings()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")

    def darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        if color.startswith("#"):
            r = int(color[1:3], 16)
            g = int(color[3:5], 16)
            b = int(color[5:7], 16)
            return f"#{max(0, r-30):02x}{max(0, g-30):02x}{max(0, b-30):02x}"
        return color

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.is_running = False
            self.save_settings()
            if hasattr(self, 'db_manager') and self.db_manager:
                self.db_manager.close()
            self.destroy()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            self.destroy()